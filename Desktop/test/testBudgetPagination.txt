@Test
fun testBudgetPagination() {
    addRecord(BudgetRecord(2020, 5, 10, BudgetType.Приход))
    addRecord(BudgetRecord(2020, 5, 5, BudgetType.Приход))
    addRecord(BudgetRecord(2020, 5, 20, BudgetType.Приход))
    addRecord(BudgetRecord(2020, 5, 30, BudgetType.Приход))
    addRecord(BudgetRecord(2020, 5, 40, BudgetType.Приход))
    addRecord(BudgetRecord(2030, 1, 1, BudgetType.Расход))

    val response = RestAssured.given()
        .queryParam("limit", 3)
        .queryParam("offset", 1)
        .get("/budget/year/2020/stats")
        .toResponse<BudgetYearStatsResponse>()

    Assert.assertEquals(5, response.total)
    Assert.assertEquals(3, response.items.size)
    Assert.assertEquals(105, response.totalByType[BudgetType.Приход.name])
}

testStatsSortOrder:

@Test
fun testStatsSortOrder() {
    addRecord(BudgetRecord(2020, 5, 100, BudgetType.Приход))
    addRecord(BudgetRecord(2020, 1, 5, BudgetType.Приход))
    addRecord(BudgetRecord(2020, 5, 50, BudgetType.Приход))
    addRecord(BudgetRecord(2020, 1, 30, BudgetType.Приход))
    addRecord(BudgetRecord(2020, 5, 400, BudgetType.Приход))

    // Ожидаемый порядок сортировки - месяц по возрастанию, сумма по убыванию
    val response = RestAssured.given()
        .get("/budget/year/2020/stats?limit=100&offset=0")
        .toResponse<BudgetYearStatsResponse>()

    val sortedItems = response.items.sortedWith(compareBy({ it.month }, { -it.amount }))

    Assert.assertEquals(30, sortedItems[0].amount)
    Assert.assertEquals(5, sortedItems[1].amount)
    Assert.assertEquals(400, sortedItems[2].amount)
    Assert.assertEquals(100, sortedItems[3].amount)
    Assert.assertEquals(50, sortedItems[4].amount)
}
